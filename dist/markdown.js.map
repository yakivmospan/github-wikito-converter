{"version":3,"sources":["../src/markdown.js"],"names":[],"mappings":"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","file":"markdown.js","sourcesContent":["\"use strict\"\n\nvar marked = require('marked')\n  , highlight = require('highlight.js')\n  , fs = require('fs')\n  , path = require('path')\n  , util = require('util')\n  , datauri = require('datauri').sync\n  , helpers = require('./helpers')\n\n\nclass Markdown {\n\n  constructor(wikiPath) {\n    this.wikiPath = wikiPath\n    this.tocLinks = []\n    this.firstTocLiClassProcessed = false\n    this.setupMainRenderer()\n        .setupTocRenderer()\n  }\n\n  setupMainRenderer() {\n\n    var self = this\n    this.mainRenderer = new marked.Renderer()\n\n    this.mainRenderer.code = function(code, lang) {\n      code = lang === undefined ? highlight.highlightAuto(code) : highlight.highlight(lang, code)\n      return `<pre class=\"hljs\">${code.value}</pre>`\n    }\n\n    this.mainRenderer.link = function(href, title, text) {\n      if (!href.match(/^https?:\\/\\//)) {\n        href = '#' + helpers.getPageIdFromFilename(href)\n      } else if (self.tocLinks && self.tocLinks.indexOf(href) != -1){\n        var hrefSplits = href.split(new RegExp('[\\\\|/]'))\n        if(hrefSplits.length > 0){\n          href = '#' + helpers.getPageIdFromFilename(hrefSplits[hrefSplits.length - 1])\n        }\n      }\n      return `<a href=\"${href}\">${text}</a>`\n    }\n\n    this.mainRenderer.image = function(href, title, text) {\n      if (!href.match(/^https?:\\/\\//)) {\n        href = path.resolve(self.wikiPath, href)\n        return util.format('<img src=\"%s\" />', datauri(href))\n      } else{\n        return util.format('<img src=\"%s\" />', href)\n      }\n    }\n    return this\n  }\n\n  setupTocRenderer() {\n\n    var self = this\n    this.tocRenderer = new marked.Renderer()\n\n    this.tocRenderer.list = function(body, ordered) {\n      var tag = ordered ? 'ol' : 'ul'\n      return `<${tag} class=\"nav gwc-nav\">${body}</${tag}>`\n    }\n\n    this.tocRenderer.listitem = function(text) {\n      self.tocLiCounter += 1\n      var regs = text.match(/^([^<]+)/)\n      if (regs) {\n        text = '<span>' + text.substr(0, regs[0].length) + '</span>' + text.substr(regs[0].length)\n      }\n\n      if (!self.firstTocLiClassProcessed && text.substr(0, 2) === '<a') {\n        self.firstTocLiClassProcessed = true\n        return `<li class=\"active\">${text}</li>`\n      }\n\n      return `<li>${text}</li>`\n    }\n\n    this.tocRenderer.link = function(href, title, text) {\n      self.tocLinks.push(href)\n      href = helpers.getPageIdFromFilename(href)\n      return `<a href=\"#${href}\">${text}</a>`\n    }\n\n    return this\n  }\n\n  convertTocMarkdownString(markdown) {\n    return this.convertMarkdownString(markdown, this.tocRenderer)\n  }\n\n  convertMarkdownString(markdown, renderer) {\n    renderer = renderer || this.mainRenderer\n    return marked(markdown, {renderer: renderer})\n  }\n\n  convertMarkdownFile(markdown_file) {\n    return this.convertMarkdownString(fs.readFileSync(markdown_file, {encoding: 'utf8'}))\n  }\n\n}\n\nmodule.exports = Markdown\n"]}