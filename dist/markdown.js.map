{"version":3,"sources":["../src/markdown.js"],"names":[],"mappings":"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","file":"markdown.js","sourcesContent":["\"use strict\"\n\nvar marked = require('marked')\n  , highlight = require('highlight.js')\n  , fs = require('fs')\n  , path = require('path')\n  , util = require('util')\n  , datauri = require('datauri').sync\n  , logger = require('./logger')\n  , helpers = require('./helpers')\n\n\nclass Markdown {\n\n  constructor(wikiPath, aliases, options) {\n    this.wikiPath = wikiPath\n    this.wikiFileAliases = aliases\n    this.tocItems = []\n    this.firstTocLiClassProcessed = false\n    this.options = options || {}\n    this.currentPageId = ''\n    this.setupMainRenderer()\n      .setupTocRenderer()\n  }\n\n  setupMainRenderer() {\n\n    var self = this\n    this.mainRenderer = new marked.Renderer()\n\n    this.mainRenderer.code = function(code, lang) {\n      if (lang && ['plantuml', 'puml'].includes(lang)) {\n        return `<img alt=\"plantuml-diagram\" src=\"${helpers.getPlantEncoded(code)}\"/>`;\n      }\n      if (lang && highlight.getLanguage(lang)) {\n        code = highlight.highlight(code, {language: lang, ignoreIllegals: true});\n        return `<pre class=\"hljs\">${code.value}</pre>`\n      }\n      if (!self.options.disableHighlightAuto) {\n        code = highlight.highlightAuto(code);\n        return `<pre class=\"hljs\">${code.value}</pre>`\n      }\n      return `<pre class=\"hljs\">${code}</pre>`\n    }\n\n    this.mainRenderer.heading = function(text, level, raw) {\n      // links to heading inside of the page:\n      //   if current page defined then prefix heading id with file page id\n      // for example:\n      //   My-Page#section-1 is id of heading \"Section 1\" inside of MyPage.md file\n      //\n      // know issues of [^\\w]+ pattern:\n      //   no unicode, this is not how GitHub does it\n      let r = (self.currentPageId ? self.currentPageId + '#' : '') + raw.toLowerCase().replace(/[^\\w]+/g, '-').replace(/[^\\w]*$/g, '')\n      return '<h'\n        + level\n        + (r ? ' id=\"' + r + '\"' : '')\n        + '>'\n        + text\n        + '</h'\n        + level\n        + '>\\n'\n    }\n\n    this.mainRenderer.link = function(href, title, text) {\n      if ((!href.match(/^https?:\\/\\//i) && !href.match(/^mailto:/i)) || self.isTocLink(href)) {\n        href =\n          !href.startsWith('#') ? // if href starts with # then it is a ref to section inside of current page\n          '#' + href :\n          (self.currentPageId ? '#' + self.currentPageId : '') + href\n      }\n      return `<a href=\"${href}\">${text}</a>`\n    }\n\n    this.mainRenderer.image = function(href, title, text) {\n      if (!href.match(/^https?:\\/\\//)) {\n        href = path.resolve(self.wikiPath, href)\n        return util.format('<img src=\"%s\" />', datauri(href))\n      } else {\n        return util.format('<img src=\"%s\" />', href)\n      }\n    }\n    return this\n  }\n\n  setupTocRenderer() {\n\n    var self = this\n    this.tocRenderer = new marked.Renderer()\n\n    this.tocRenderer.list = function(body, ordered) {\n      var tag = ordered ? 'ol' : 'ul'\n      return `<${tag} class=\"nav\">${body}</${tag}>`\n    }\n\n    this.tocRenderer.listitem = function(text) {\n      self.tocLiCounter += 1\n      var regs = text.match(/^([^<]+)/)\n      if (regs) {\n        text = '<span>' + text.substr(0, regs[0].length) + '</span>' + text\n          .substr(regs[0].length)\n      }\n\n      if (!self.firstTocLiClassProcessed && text.substr(0, 2) === '<a') {\n        self.firstTocLiClassProcessed = true\n        return `<li class=\"active\">${text}</li>`\n      }\n\n      return `<li>${text}</li>`\n    }\n\n    this.tocRenderer.link = function(href, title, text) {\n      let pageId = helpers.getPageIdFromFilename(href)\n      if (self.wikiFileAliases[pageId]) {\n        self.tocItems.push({\n          title: text,\n          link: href,\n          pageId: pageId\n        })\n        href = `#${pageId}`\n      }\n      return `<a href=\"${href}\">${text}</a>`\n    }\n\n    return this\n  }\n\n  convertTocMarkdownString(markdown) {\n    return {\n      tocHtml: marked(this.replaceGithubWikiLinks(markdown), {renderer: this.tocRenderer}),\n      tocItems: this.tocItems\n    }\n  }\n\n  convertMarkdownFile(markdown_file, pageId) {\n    logger.info('page:', pageId)\n    //\n    this.currentPageId = pageId || ''\n    let md = fs.readFileSync(markdown_file, {encoding: 'utf8'})\n    return marked(md, {renderer: this.mainRenderer})\n  }\n\n  /**\n   * @private\n   * @returns {Boolean}\n   */\n  isTocLink(link) {\n    for (let item of this.tocItems) {\n      if (item.link == link) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * @private\n   * @returns {String}\n   */\n  replaceGithubWikiLinks(markdown) {\n    // github supports [[...]] declaration of links. find all of them\n    return markdown.replace(/\\[\\[([^\\]]+)\\]\\]/g, function(allPattern, link) {\n\n      // inside of brekets link can be added as:\n      // - page name only [[Calls]], [[Call-Log]];\n      // - link title only [[Call Log]];\n      // - link title and page name [[Call Log|Call-Log]], [[Log|Call Log]].\n\n      // search for link title\n      let linkTitle = link.replace(/\\|([^\\|]+)/, \"\")\n\n      // search for page name\n      let pageName = link.replace(/([^\\|]+)\\|/, \"\")\n\n      if(!linkTitle){\n        linkTitle = link\n      }\n\n      if (!pageName){\n        pageName = link\n      }\n\n      // make sure page name has correct format\n      pageName = pageName.replace(/ /g, \"-\")\n\n      // convert [[<link title> | <page name>]] to [<link title>](<page name>)\n      link = `[${linkTitle}](${pageName})`\n      return link\n    })\n  }\n}\n\n\nmodule.exports = Markdown\n"]}