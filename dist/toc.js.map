{"version":3,"sources":["../src/toc.js"],"names":[],"mappings":"AAAA,YAAY,CAAA;;;;;;AAEZ,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,EAAE,GAAG,OAAO,CAAC,UAAU,CAAC;IACxB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAA;;IAE5B,GAAG;;;;;;;AAMI,WANP,GAAG,CAMK,SAAS,EAAE;0BANnB,GAAG;;AAOL,QAAI,CAAC,SAAS,GAAG,SAAS,CAAA;AAC1B,QAAI,CAAC,eAAe,EAAE,CAAA;GACvB;;eATG,GAAG;;WAWI,uBAAG;AACZ,aAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAA;KACtB;;;WAEM,mBAAG;AACR,aAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAA;KACxB;;;WAEO,oBAAG;AACT,aAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAA;KACzB;;;;;;;WAKc,2BAAG;AAChB,UAAI,CAAC,GAAG,GAAG,EAAE,CAAA;AACb,UAAI,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAA;;AAE1C,UAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;AACjG,UAAI,CAAC,GAAG,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,CAAA;AACvC,UAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAA;KAC1C;;;;;;;;WAMiB,8BAAG;AACnB,UAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAA;AACzC,UAAI,OAAO,EAAE;AACX,eAAO,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAA;OACpD;;AAED,aAAO,IAAI,CAAC,kBAAkB,EAAE,CAAA;KACjC;;;;;;;;WAMiB,8BAAG;AACnB,aAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ,EAAI;AACpE,YAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;AACtC,eAAO,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,qBAAqB,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAA;OACpF,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KACd;;;SAzDG,GAAG;;;AA4DT,MAAM,CAAC,OAAO,GAAG,GAAG,CAAA","file":"toc.js","sourcesContent":["\"use strict\"\r\n\r\nvar path = require('path')\r\n  , fs = require('fs-extra')\r\n  , util = require('util')\r\n  , marked = require('marked')\r\n  , helpers = require('./helpers')\r\n\r\nclass Toc {\r\n\r\n  /**\r\n   *\r\n   * @param {GWC} gwc\r\n   */\r\n  constructor(converter) {\r\n    this.converter = converter\r\n    this.computeTocParts()\r\n  }\r\n\r\n  getMarkdown() {\r\n    return this.toc.tocMd\r\n  }\r\n\r\n  getHtml() {\r\n    return this.toc.tocHtml\r\n  }\r\n\r\n  getItems() {\r\n    return this.toc.tocItems\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  computeTocParts() {\r\n    this.toc = {}\r\n    this.toc.tocMd = this.getTocFileContents()\r\n\r\n    let convertedToc = this.converter.getMarkdownConverter().convertTocMarkdownString(this.toc.tocMd)\r\n    this.toc.tocHtml = convertedToc.tocHtml\r\n    this.toc.tocItems = convertedToc.tocItems\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @returns {String}\r\n   */\r\n  getTocFileContents() {\r\n    var tocFile = this.converter.getTocFile()\r\n    if (tocFile) {\r\n      return fs.readFileSync(tocFile, {encoding: 'utf8'})\r\n    }\r\n    // if no toc file, generate contents from files\r\n    return this.genTocFileContents()\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @returns {string}\r\n   */\r\n  genTocFileContents() {\r\n    return Object.keys(this.converter.getMarkdownFiles()).map(filename => {\r\n      var basename = path.basename(filename)\r\n      return util.format('- [%s](%s)', helpers.getPageIdFromFilename(basename), basename)\r\n    }).join('\\n')\r\n  }\r\n}\r\n\r\nmodule.exports = Toc\r\n"]}